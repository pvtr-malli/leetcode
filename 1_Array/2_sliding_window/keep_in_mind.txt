- when you do the for loop, do for the end variable not for i. see problem 6.
```
for end in range(n,n-1)
```

pattern dynamix length:
```
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:

        # STEP 1: do the initializations for the tracking and counting.
        h = {s[0]: 0} # val: index
        start = 0
        maxi = 1

        # STEP 2: start the for loop for the end variable. 
        for end in range(1 , len(s) - 1):
            # STEP 3: incerease the widnow.
            if s[end] in h:
                # skip to the next index of the repeating character present in the hasmap.
                start = h[s[end]] + 1

            # STEP 4: Decrease the window size, if the newly added thing breaks the rule.
            else:
                # add
                h[s[end]] = end 
                # add the character and increase the window size.

                # STEP 5: keep track of the trackers or counters.
                maxi = max(maxi, end - start + 1) # 0 , 1[start], 2, 3,4[end] = 4 - 1 = 3 + 1
        return maxi
```
- not everything should be solved using for loop, if you need while loop go for it. ex: 22_209._minimum_size_subarray_sum_medium.ipynb
- pattern
```
- loop over end 
- increase until the condition met 
- decrese until the condition is not voilating.
- keep the tracker properly.
```

- Sliding window fails when we have negative numbers inside the array - prefer something else at that time.
